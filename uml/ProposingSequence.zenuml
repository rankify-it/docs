
Player.proposes(proposal){
  GameMaster.getPlayersSalt(playerId,turn+1,gameId)
  {
    if(notAuthorized(playerId,EEAToken))
    {
      return Error(403)
    }
     salt = KeyStore.getPlayerSalt(gameid,turn+1,playerId)
    {
      turnSalt = hash(PK,gameId,turn)
      playerSalt = hash(turnSalt,playerId)
    }
    return playerSalt
  }
  commitement,hiddenPreimage = EventLogs.getLogs("CommitedProposing", playerId, turn-1)
  preImage = decrypt(hiddenPreimage)
  // players commitement for proposing this in given turn
  propId = hash(playerSalt,proposal)
  sig = Player.sign(propId)
  proof = generateSnarkProof(hiddenPreimage)
  gmSignature,hiddenProposal = GameMaster.apostile(propId,gameId,turn,sig,playerId)
  // proposal identifier
  proposalStruct = _(gameId,turn,sig,proposal,propId)

  proposalId = hash(preImage.nullifier)
    GameContract.submitProposal(gmSignature,hiddenProposal,proposalId)
  {
    validSig = GameContract.validateSig(playerId,propId,sig)
    proposed = GameStorage.proposalExists(gameId,turn,playerId)
     if(!validProof || !validSig || proposed)
    {
      return revert
    }
    GameStorage.setProposals(playerId,propId)
    if(GameStorage.voted(playerId) || turn ==1)
    {
      GameStorage.playerMove(gameId,player)
    }
     EventLogs.Proposed(gameId,turn,encProposal,playerId,sig)
    return receipt
  }

  return receiptOrError

}



// GameMaster.submitProposal(proposalStruct,playerId) {
//     gameId,sig,proposal,propId = proposalStruct
//     turn = GameContract.ReadState(gameId)
//     {
//       turn =  GameStorage.readState(gameId)
//     }
//      KeyStore.getTurnSalt(gameId,turn+1)
//     {
//       turnSalt = hash(PK,gameId,turn+1)
//       return nextTurnSalt
//     }
//     playerSalt = hash(nextTurnSalt,playerId)
//     propId = hash(playerSalt,proposal)
//     if(playerId != signer(propId,sig))
//       {
//         return error
//       }
//       encrProposal = KeyStore.encrypt(proposal)
//       gmSignature= KeyStore.sign(playerId,propId,encrProposal)

//     return _(gmSignature, encdProposal)

// }